#+TITLE: Alex Scott's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp    :tangle yes :results silent :exports code


* Configuration

This emacs.d setup uses a literate programming style. A term coined by Donald Knuth.
- In order to generate a init.el file, run org tangle C-c v t and the different Babel code blocks will create Alex.el. I then create a symlink for init.el from that in my .emacs.d folder.

Inspired by Sacha Chua's work and her .emacs.d.

I like EXWM as a WM.

** Personal information

#+BEGIN_SRC emacs-lisp 
(setq user-full-name "Alex Scott"
      user-mail-address "alex@alexscott.net")
#+END_SRC


** Starting up

Here's how we start:

#+begin_src emacs-lisp 
;; This sets up the load path so that we can override it
(package-initialize)
;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
;; (add-to-list 'load-path "~/vendor/org-mode/lisp")
;; (add-to-list 'load-path "~/vendor/org-mode/contrib/lisp")
;; (require 'org)
(setq custom-file "~/.emacs.d/custom-settings.el")
(setq use-package-always-ensure t)
(load custom-file t)
#+END_SRC


*** Add package sources
#+BEGIN_SRC emacs-lisp 
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "org" package-archives)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
#+END_SRC

Use =M-x package-refresh-contents= to reload the list of packages
after adding these for the first time.

*** Add my elisp directory and other files
#+BEGIN_SRC emacs-lisp 
(add-to-list 'load-path "~/elisp")
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package quelpa)
(use-package quelpa-use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC


*** Libraries

#+begin_src emacs-lisp 
(use-package dash :ensure t)
(use-package diminish :ensure t)
#+end_src


*** Recent files

#+BEGIN_SRC emacs-lisp 
(require 'recentf)
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode)
#+END_SRC


*** Exwn
#+begin_src emacs-lisp
(use-package exwm)   
(require 'exwm)
(require 'exwm-config)
(exwm-config-example) 
#+end_src


*** Babel and code blocks.
Do we need ORG mode?
#+BEGIN_SRC emacs-lisp 
;; (use-package org-tempo)
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp 
(use-package magit
:ensure t
:bind 
("C-c g" . magit-file-dispatch))
#+END_SRC

***  Project navigation.
#+begin_src emacs-lisp 
(use-package projectile
  :diminish projectile-mode
  :config
  (progn
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)
    (setq projectile-completion-system 'default)
    (setq projectile-enable-caching t)
    (setq projectile-indexing-method 'alien)
    (add-to-list 'projectile-globally-ignored-files "node-modules")))
(use-package helm-projectile)
#+end_src

#+BEGIN_SRC emacs-lisp 
(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (require 'helm-for-files)
    (setq helm-candidate-number-limit 100)
    (setq helm-completing-read-handlers-alist
          '((describe-function)
            (consult-bookmark)
            (consult-outline)
            (org-refile)
            (consult-line)
            (consult-mark)
            (consult-multi-occur)
            (describe-variable)
            (execute-extended-command)
            (consult-yank)))
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :config
  (defadvice helm-files-insert-as-org-links (around sacha activate)
    (insert (mapconcat (lambda (candidate)
                         (org-link-make-string candidate))
                       (helm-marked-candidates)
                       "\n")))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . helm-buffers-list)
         ("C-x C-f" . helm-find-files)
         ("M-y" . helm-show-kill-ring)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c SPC" . helm-all-mark-rings)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
(use-package helm-ls-git)
#+END_SRC


*** Helm-swoop - quickly finding lines

This promises to be a fast way to find things. Let's bind it to =Ctrl-Shift-S= to see if I can get used to that...

#+BEGIN_SRC emacs-lisp 
(use-package helm-swoop
  :bind
  (("C-S-s" . helm-swoop)
   ("M-i" . helm-swoop)
   ("M-s s" . helm-swoop)
   ("M-s M-s" . helm-swoop)
   ("M-I" . helm-swoop-back-to-last-point)
   ("C-c M-i" . helm-multi-swoop)
   ("C-x M-i" . helm-multi-swoop-all)
   )
  :config
  (progn
    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop))
  )
#+END_SRC

** Coding
*** Javascript

I like js2-mode.

#+begin_src emacs-lisp 
(add-to-list 'auto-mode-alist '("\\.js\\'\\|\\.json\\'" . js2-mode))
#+end_src

Handy shortcuts:
#+begin_src emacs-lisp 
(use-package js2-mode
  :mode "\\.js\\'")
#+end_src



